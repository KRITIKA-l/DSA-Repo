#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *next;
};

struct node* head = NULL;

void insertAtBeginning(int data)
{
    struct node *new_node = (struct node*)malloc(sizeof(struct node));

    new_node->data = data;
    new_node->next = head;
    head = new_node;
}

void insertatend(int data)
{
    struct node *new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = data;
    new_node->next = NULL;

    if (head == NULL)
    {
        head = new_node;
        return;
    }
    struct node *temp = head;
    while(temp -> next != NULL)
    {
        temp = temp -> next;
    }
    temp -> next = new_node;
}

void insertatposition(int data, int position)
{
    struct node *new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = data;
    new_node->next = NULL;

    if (position == 1)
    {
        new_node->next = head;
        head = new_node;
        return;
    }

    int count = 1;
    struct node *temp = head;

     while (temp != NULL && count < position - 1)
    {
        temp = temp->next;
        count++;
    }

    if (temp == NULL)
    {
        printf("Position is beyond the length of the list. Inserting at the end.\n");
        insertatend(data);
        free(new_node);  
        return;
    }

    new_node->next = temp->next;
    temp->next = new_node;
}


void insertatpositionbefore(int data, int position)
{
    struct node *new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = data;
    new_node->next = NULL;

    if (position == 1)
    {
        new_node->next = head;
        head = new_node;
        return;
    }

    int count = 1;
    struct node *temp = head;
    struct node *prev = NULL;

    while (temp != NULL && count < position - 1)
    {
        prev = temp;
        temp = temp->next;
        count++;
    }

    if (temp == NULL)
    {
        printf("Position is beyond the length of the list. Inserting at the end.\n");
        insertatend(data);
        free(new_node);  
        return;
    }

    new_node->next = temp;
    if (prev != NULL)
    {
        prev->next = new_node;
    }
}


void insertatpositionafter(int data, int position)
{
    struct node *new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = data;
    new_node->next = NULL;

    if (head == NULL)
    {
        if (position == 0)  
        {
            head = new_node;
            return;
        }
        else
        {
            printf("List is empty. Cannot insert after position %d.\n", position);
            free(new_node);
            return;
        }
    }

    struct node *temp = head;
    int count = 1;

    while (temp != NULL && count < position)
    {
        temp = temp->next;
        count++;
    }

    if (temp == NULL)
    {
        printf("Position %d is beyond the length of the list. Inserting at the end.\n", position);
        insertatend(data);
        free(new_node);
        return;
    }

    new_node->next = temp->next;
    temp->next = new_node;
}


void printList()
{
    struct node *temp = head;
    while (temp != NULL)
    {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main()
{
    insertAtBeginning(50); 
    insertAtBeginning(40); 
    insertAtBeginning(30); 
    insertAtBeginning(20); 
    insertAtBeginning(10);

    insertatend(60);
    insertatend(70);

    // insertatposition(15,2);
    // insertatpositionbefore(25,3);
    insertatpositionafter(35,3);

    printList();

    return 0;
}
